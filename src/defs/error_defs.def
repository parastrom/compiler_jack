#ifdef ERROR_SEVERITY_ENUM
ERROR_SEVERITY(ERROR_SEV_ERROR, "Error")
ERROR_SEVERITY(ERROR_SEV_WARN, "Warning")
#endif

#ifdef ERROR_PHASE_ENUM
ERROR_PHASE(ERROR_PHASE_LEXER, "Lexer")
ERROR_PHASE(ERROR_PHASE_PARSER, "Parser")
ERROR_PHASE(ERROR_PHASE_SEMANTIC, "Semantic")
ERROR_PHASE(ERROR_PHASE_CODEGEN, "Codegen")
ERROR_PHASE(ERROR_PHASE_INTERNAL, "Internal")
#endif

#ifdef ERROR_CODE_ENUM
ERROR_CODE(ERROR_NONE, "None", "No error has occurred. Proceed as usual.")
ERROR_CODE(ERROR_INVALID_INPUT, "Invalid Input", "Check the format and values of the input provided.")
ERROR_CODE(ERROR_INVALID_OUTPUT, "Invalid Output", "Verify the output data structure and values.")
ERROR_CODE(ERROR_MEMORY_ALLOCATION, "Memory Allocation", "Ensure sufficient memory and check for memory leaks.")
ERROR_CODE(ERROR_OPEN_DIRECTORY, "Open Directory", "Check the directory path and permissions.")
ERROR_CODE(ERROR_BUFFER_FULL, "Buffer Full", "Flush or expand the buffer to continue.")
ERROR_CODE(ERROR_BUFFER_EMPTY, "Buffer Empty", "Ensure data is being written to the buffer.")
ERROR_CODE(ERROR_NULL_POINTER, "Null Pointer", "Check for uninitialized or wrongly de-referenced pointers.")
ERROR_CODE(ERROR_FILE_READ, "File Read", "Check file path, format, and read permissions.")
ERROR_CODE(ERROR_FILE_OPEN, "File Open", "Ensure the file exists and has the correct permissions.")
ERROR_CODE(ERROR_JSON_PARSING, "JSON Parsing", "Verify the JSON structure and ensure it's valid.")
ERROR_CODE(ERROR_FILE_WRITE, "File Write", "Check file path and write permissions.")
ERROR_CODE(ERROR_FILE_CLOSE, "File Close", "Ensure the file was opened before trying to close.")
ERROR_CODE(ERROR_OUT_OF_BOUNDS, "Out of Bounds", "Verify index values and array/list boundaries.")
ERROR_CODE(ERROR_LEXER_NEWLINE_IN_STRING, "Lexer Newline in String", "Strings should not contain unescaped newline characters.")
ERROR_CODE(ERROR_LEXER_EOF_IN_STRING, "Lexer EOF in String", "String literals must be closed before the end of the file.")
ERROR_CODE(ERROR_LEXER_UNEXPECTED_EOF, "Lexer Unexpected EOF", "Check for unclosed constructs or missing data.")
ERROR_CODE(ERROR_LEXER_ILLEGAL_SYMBOL, "Lexer Illegal Symbol", "Ensure all symbols used are valid in JACK.")
ERROR_CODE(ERROR_PARSER_UNEXPECTED_TOKEN, "Parser Unexpected Token", "Check the JACK syntax around the mentioned token.")
ERROR_CODE(ERROR_SEMANTIC_UNDECLARED_SYMBOL, "Semantic Undeclared Symbol", "Declare the symbol before using it.")
ERROR_CODE(ERROR_SEMANTIC_REDECLARED_SYMBOL, "Semantic Redeclared Symbol", "The symbol has already been declared in this scope.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_SUBROUTINE, "Semantic Invalid Subroutine", "Check the subroutine declaration and usage.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_TYPE, "Semantic Invalid Type", "Ensure types match expected values.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_KIND, "Semantic Invalid Kind", "Verify the kind (static, field, etc.) of the variable or function.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_INDEX, "Semantic Invalid Index", "Indices should be non-negative integers.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_SCOPE, "Semantic Invalid Scope", "Check where variables and functions are declared and accessed.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_STATEMENT, "Semantic Invalid Statement", "Ensure the statement is valid in JACK.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_EXPRESSION, "Semantic Invalid Expression", "Check the expression for correctness.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_TERM, "Semantic Invalid Term", "Ensure terms are used correctly in expressions.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_OPERATION, "Semantic Invalid Operation", "Make sure the operation is valid for the given terms.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_VAR, "Semantic Invalid Var", "Check the variable declaration and usage.")
ERROR_CODE(ERROR_SEMANTIC_INVALID_ARGUMENT, "Semantic Invalid Argument", "Ensure arguments match the subroutine's signature.")
ERROR_CODE(ERROR_UNKNOWN_NODE_TYPE, "Unknown Node Type", "The AST has encountered an unrecognized node type.")
ERROR_CODE(ERROR_JSON_STRUCTURE, "JSON Structure", "Ensure the JSON has the correct structure and values.")
#endif
