#ifndef ERROR_H
#define ERROR_H

typedef enum {
    ERROR_NONE,
    ERROR_INVALID_INPUT,
    ERROR_INVALID_OUTPUT,
    ERROR_MEMORY_ALLOCATION,
    ERROR_OPEN_DIRECTORY,
    ERROR_BUFFER_FULL,
    ERROR_BUFFER_EMPTY,
    ERROR_NULL_POINTER,
    ERROR_FILE_READ,
    ERROR_FILE_OPEN,
    ERROR_JSON_PARSING,
    ERROR_FILE_WRITE,
    ERROR_FILE_CLOSE,
    ERROR_LEXER,
    ERROR_LEXER_NEWLINE_IN_STRING,
    ERROR_LEXER_EOF_IN_STRING,
    ERROR_LEXER_UNEXPECTED_EOF,
    ERROR_LEXER_ILLEGAL_SYMBOL,
    ERROR_PARSER_UNEXPECTED_TOKEN,
    ERROR_SEMANTIC_UNDECLARED_SYMBOL,
    ERROR_SEMANTIC_REDECLARED_SYMBOL,
    ERROR_SEMANTIC_INVALID_SUBROUTINE,
    ERROR_SEMANTIC_INVALID_TYPE,
    ERROR_SEMANTIC_INVALID_KIND,
    ERROR_SEMANTIC_INVALID_INDEX,
    ERROR_SEMANTIC_INVALID_SCOPE,
    ERROR_SEMANTIC_INVALID_STATEMENT,
    ERROR_SEMANTIC_INVALID_EXPRESSION,
    ERROR_SEMANTIC_INVALID_TERM,
    ERROR_SEMANTIC_INVALID_OPERATION,
    ERROR_SEMANTIC_INVALID_VAR,
    ERROR_SEMANTIC_INVALID_ARGUMENT,
    ERROR_UNKNOWN_NODE_TYPE,
} ErrorCode;

typedef struct {
    ErrorCode code;
    char *msg;
    const char *file;
    int line;
} Error;

Error get_error(void);
void set_error(Error error);

#endif // ERROR_H